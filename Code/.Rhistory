##########################
# Set working directory and UserID
##########################
my_directory <- paste0(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(my_directory)
source("packages.R")
## Create folders to save results
dir.create(file.path("../Data","Validating"))
#####################
#Run Pipeline
#####################
system.time(tar_make())
#####################
#Run Pipeline
#####################
system.time(tar_make())
#####################
#Run Pipeline
#####################
system.time(tar_make())
tar_meta(fields = error, complete_only = TRUE)
#####################
#Run Pipeline
#####################
system.time(tar_make())
tar_meta(fields = error, complete_only = TRUE)
str_replace_all(
str_squish("itemname"),
"(\\&)|a38|(\\?)|\\b1883\\b|REMA 1000|\\?|^ |_|\\?|\\&|vaegt|(\\#)",
c("og", "acidophilus tykmaelk", "1/2", "33cl", "", ""))
#####################
#Run Pipeline
#####################
system.time(tar_make())
tar_meta(fields = error, complete_only = TRUE)
#####################
#Run Pipeline
#####################
system.time(tar_make())
tar_meta(fields = error, complete_only = TRUE)
cpd2 <- tar_read(cpd2)
##create dataset with only product names and itemnumbers for name match
cpd_match_name <- cpd2%>%
group_by(itemname, itemnumber) %>% dplyr::summarize(count_item=1, total_items=sum(amount))%>%arrange(desc(total_items))
##extract and remove dosage information and filter less relevant merchants
## create product dataset where each product is unique. product dataset contains aggregated purchase frequencies as well for later use.
## code be improved even more with dosage and pack combos for i.e. gajol, and a few other changes beer carlsb. 1883
#cpd_proddata<- cpd_match_name%>%
suppressWarnings({cpd_proddata2<- cpd_match_name%>%
mutate(
newname= str_squish(itemname),
newname=str_replace(newname,"(\\&)","og"),
newname=str_replace(newname,"(a38)","acidophilus tykmaelk"),
newname=str_replace(newname,"(\\?)","1/2"),
newname=str_replace(newname,"\\b1883\\b","33cl"),
newname=str_replace(newname,"REMA 1000|\\?|^ |_|\\?|\\&|vaegt",""),
newname=str_replace(newname,"(\\#)",""),
## detect eco products from the product name
eco= case_when(
str_detect(newname,"(konventionel)|(\\bikke oe.o[:alpha:]*\\b)")~ "non eco",
str_detect(newname,"\\boe.o[:alpha:]*\\b")~ "eco",
TRUE                      ~ "unknown"),
## detect country from the product name
country=case_when(
str_detect(newname,"(^|\\s+)d(k|ansk(e|))(\\s+|$)")~ "dk",
str_detect(newname,"(^|\\s+)udl(\\.|and(|ske))(\\s+|$)")~ "other",
str_detect(newname,"(^|\\s+)tysk(|land(e|ske|))(\\s+|$)")~ "other",
TRUE                      ~ "unknown"),
##remove eco and country from name
newname=str_replace(tolower(newname),"(^|\\s+)(d(k|ansk(e|))|udl(\\.|and(|ske))|tysk(|land(e|ske|)))\\b|(loese|kugle konventionel)|
(\\bikke oe.o\\b|\\boe.o\\b)",""),
##get information about fat % or alcohol % or product type from products
product_type_raw=str_extract(tolower(newname), "\\b\\d{1,4}\\s*[.,\\/]?\\s*\\d{0,4}%?\\b|\\b[smlx](\\/)[smlx]?\\b"),
product_type_meassure=str_extract(product_type_raw, "\\d{1,4}\\s*[.,\\/]?\\s*\\d{0,4}"),
product_type_unit=str_replace(product_type_raw, "\\d{1,4}\\s*[.,\\/]?\\s*\\d{0,4}", ""),
## get information about packages i.e. 6 pak, number of products sold i.e. 20 aeg etc.
pieces_raw=str_extract(tolower(newname), "(?<=\\b|^|\\s)\\d{1,4}(\\s+|)(x|\\*|fl|st[yk]|pcs|ds\\.|bk|bakke|[-](pk|pa[:alpha:]k|pack[:alpha:]|pak)|\\?s|rl)(?=\\s|\\b|$)"),
pieces=ifelse(str_detect(tolower(newname), "aeg") & str_detect(tolower(newname), "\\b(([smlx](\\/)[smlx]?)|([smlx]))\\b|$"),
str_extract(tolower(newname), "(?<=\\b|^|\\s)\\d{1,4}"),
str_extract(pieces_raw, "(?<=\\b|^|\\s)\\d{1,4}")),
##remove the information already extracted above
newname=str_replace(newname, "\\b\\d{1,4}\\s*(x|\\*|fl|st[yk]|pcs|hb|bk|pk|pak|pack|\\?s|rl|[smlx](\\/)[smlx]?)[\\d\\s.,\\/]*[%+]?\\b|([smlx](\\/)[smlx]?)(\\s+|$)\\d{1,4}\\s*(x|\\*|fl|st[yk]|pcs|hb|bk|pk|pak|pack|\\?s|rl|[smlx](\\/)[smlx]?)", ""),
newname=str_replace(newname, "(?<=\\b|^|\\s)\\d{1,4}(\\s+|)(x|\\*|fl|st[yk]|pcs|bk|[-](pk|pak|pack|pak)|\\?s|rl|[smlx](\\/)[smlx]?)", ""),
## identify multipliers
##multiplier=str_extract(tolower(newname),"[[:digit:]]{1,4}(s+|)(x|\\*|pk|-|\\/)(s+|)[[:digit:]]{1,4}((\\.|\\,|x|-|\\*|\\/)([[:blank:]]|)([[:digit:]]{1,4})|)"),
number_name=str_extract(tolower(newname), "(?<=\\b|^|\\s)\\d{1,4}(\\s*[.,\\/]?\\s*\\d{0,4})?\\s*(kg\\.|kg|kilo|kil|g[ra]{0,2}m?\\.|
l(ite|iter)?\\.|cl|ml|fl|st[yk]|pcs|hb|bk(,|\\.|\\s|\\b)|[-]|(pk\\.|pak|pack|\\?s|rl)|t[b]|mc|xl|[smlx]{1}(\\/[smlx]{1})?)?(?=\\s|\\b|$)"),
number_name = gsub(",", ".", gsub("\\.", "", number_name)),
##extract not weight units here
dosage=str_extract(tolower(newname), "(?<=^|\\s|\\b)(\\d+(\\.|,|x|-|\\*|\\/)*\\d*\\s*mg)(?=\\s|$|\\.|,|\\b)"),
unit_raw=str_extract(tolower(number_name), "(kg\\.|kg|kilo|kil|g[ra]{0,2}m?\\.|l(ite|iter)?\\.|cl|ml|fl|st[yk]|pcs|hb|bk(,|\\.|\\s|\\b)|[-]|(pk\\.|pak|pack|\\?s|rl)|t[b]|mc|xl|[smlx]{1}(\\/[smlx]{1})?)(?=$|\\.|\\b)"),
measure_raw=str_remove(tolower(number_name), "(kg\\.|kg|kilo|kil|g[ra]{0,2}m?\\.|l(ite|iter)?\\.|cl|ml|fl|st[yk]|pcs|hb|bk(,|\\.|\\s|\\b)|[-]|(pk\\.|pak|pack|\\?s|rl)|t[b]|mc|xl|[smlx]{1}(\\/[smlx]{1})?)(?=$|\\.|\\b)"),
measure_raw=str_replace(measure_raw,"x","*"), ##replaces x with * to calculate measure once numeric
newname=str_replace(tolower(newname), "(?<=\\b|^|\\s)\\d{1,4}(\\s+|)([.,\\/]|x|-|\\*|\\/|\\+|%)?\\s*\\d{0,4}?([.,\\/]|x|-|\\*|\\/|\\+|%)?(\\s+|$)|
(?<=\\b|^|\\s)\\d{1,4}(\\s+|)(x|\\*|fl|st[yk]|pcs|bk|[-]|(pk|pak|pack|\\?s|rl)(\\.|)|[smlx](\\/[smlx])?)(\\s+|$)|
[.,\\-\\/*\\+%]|\\b(m|i|vores|med|salling|gestus|og|til|a|c|s|first|loegismose)\\b", ""),
newname= str_squish(newname),
adjustment=case_when(
str_detect(unit_raw,"(cl)")~ "10",
str_detect(unit_raw,"(kg\\.|kg|kilo|kil)")~ "1000",
str_detect(unit_raw,"(^)(l(ite|iter|\\..|))")~ "1000",
str_detect(unit_raw,"(ml)")~ "1",
str_detect(unit_raw,"(%|\\+)")~ "1",
TRUE                      ~ "1")})
##extract and remove dosage information and filter less relevant merchants
## create product dataset where each product is unique. product dataset contains aggregated purchase frequencies as well for later use.
## code be improved even more with dosage and pack combos for i.e. gajol, and a few other changes beer carlsb. 1883
#cpd_proddata<- cpd_match_name%>%
suppressWarnings({cpd_proddata2<- cpd_match_name%>%
mutate(
newname= str_squish(itemname),
newname=str_replace(newname,"(\\&)","og"),
newname=str_replace(newname,"(a38)","acidophilus tykmaelk"),
newname=str_replace(newname,"(\\?)","1/2"),
newname=str_replace(newname,"\\b1883\\b","33cl"),
newname=str_replace(newname,"REMA 1000|\\?|^ |_|\\?|\\&|vaegt",""),
newname=str_replace(newname,"(\\#)",""),
## detect eco products from the product name
eco= case_when(
str_detect(newname,"(konventionel)|(\\bikke oe.o[:alpha:]*\\b)")~ "non eco",
str_detect(newname,"\\boe.o[:alpha:]*\\b")~ "eco",
TRUE                      ~ "unknown"),
## detect country from the product name
country=case_when(
str_detect(newname,"(^|\\s+)d(k|ansk(e|))(\\s+|$)")~ "dk",
str_detect(newname,"(^|\\s+)udl(\\.|and(|ske))(\\s+|$)")~ "other",
str_detect(newname,"(^|\\s+)tysk(|land(e|ske|))(\\s+|$)")~ "other",
TRUE                      ~ "unknown"),
##remove eco and country from name
newname=str_replace(tolower(newname),"(^|\\s+)(d(k|ansk(e|))|udl(\\.|and(|ske))|tysk(|land(e|ske|)))\\b|(loese|kugle konventionel)|
(\\bikke oe.o\\b|\\boe.o\\b)",""),
##get information about fat % or alcohol % or product type from products
product_type_raw=str_extract(tolower(newname), "\\b\\d{1,4}\\s*[.,\\/]?\\s*\\d{0,4}%?\\b|\\b[smlx](\\/)[smlx]?\\b"),
product_type_meassure=str_extract(product_type_raw, "\\d{1,4}\\s*[.,\\/]?\\s*\\d{0,4}"),
product_type_unit=str_replace(product_type_raw, "\\d{1,4}\\s*[.,\\/]?\\s*\\d{0,4}", ""),
## get information about packages i.e. 6 pak, number of products sold i.e. 20 aeg etc.
pieces_raw=str_extract(tolower(newname), "(?<=\\b|^|\\s)\\d{1,4}(\\s+|)(x|\\*|fl|st[yk]|pcs|ds\\.|bk|bakke|[-](pk|pa[:alpha:]k|pack[:alpha:]|pak)|\\?s|rl)(?=\\s|\\b|$)"),
pieces=ifelse(str_detect(tolower(newname), "aeg") & str_detect(tolower(newname), "\\b(([smlx](\\/)[smlx]?)|([smlx]))\\b|$"),
str_extract(tolower(newname), "(?<=\\b|^|\\s)\\d{1,4}"),
str_extract(pieces_raw, "(?<=\\b|^|\\s)\\d{1,4}")),
##remove the information already extracted above
newname=str_replace(newname, "\\b\\d{1,4}\\s*(x|\\*|fl|st[yk]|pcs|hb|bk|pk|pak|pack|\\?s|rl|[smlx](\\/)[smlx]?)[\\d\\s.,\\/]*[%+]?\\b|([smlx](\\/)[smlx]?)(\\s+|$)\\d{1,4}\\s*(x|\\*|fl|st[yk]|pcs|hb|bk|pk|pak|pack|\\?s|rl|[smlx](\\/)[smlx]?)", ""),
newname=str_replace(newname, "(?<=\\b|^|\\s)\\d{1,4}(\\s+|)(x|\\*|fl|st[yk]|pcs|bk|[-](pk|pak|pack|pak)|\\?s|rl|[smlx](\\/)[smlx]?)", ""),
## identify multipliers
##multiplier=str_extract(tolower(newname),"[[:digit:]]{1,4}(s+|)(x|\\*|pk|-|\\/)(s+|)[[:digit:]]{1,4}((\\.|\\,|x|-|\\*|\\/)([[:blank:]]|)([[:digit:]]{1,4})|)"),
number_name=str_extract(tolower(newname), "(?<=\\b|^|\\s)\\d{1,4}(\\s*[.,\\/]?\\s*\\d{0,4})?\\s*(kg\\.|kg|kilo|kil|g[ra]{0,2}m?\\.|
l(ite|iter)?\\.|cl|ml|fl|st[yk]|pcs|hb|bk(,|\\.|\\s|\\b)|[-]|(pk\\.|pak|pack|\\?s|rl)|t[b]|mc|xl|[smlx]{1}(\\/[smlx]{1})?)?(?=\\s|\\b|$)"),
number_name = gsub(",", ".", gsub("\\.", "", number_name)),
##extract not weight units here
dosage=str_extract(tolower(newname), "(?<=^|\\s|\\b)(\\d+(\\.|,|x|-|\\*|\\/)*\\d*\\s*mg)(?=\\s|$|\\.|,|\\b)"),
unit_raw=str_extract(tolower(number_name), "(kg\\.|kg|kilo|kil|g[ra]{0,2}m?\\.|l(ite|iter)?\\.|cl|ml|fl|st[yk]|pcs|hb|bk(,|\\.|\\s|\\b)|[-]|(pk\\.|pak|pack|\\?s|rl)|t[b]|mc|xl|[smlx]{1}(\\/[smlx]{1})?)(?=$|\\.|\\b)"),
measure_raw=str_remove(tolower(number_name), "(kg\\.|kg|kilo|kil|g[ra]{0,2}m?\\.|l(ite|iter)?\\.|cl|ml|fl|st[yk]|pcs|hb|bk(,|\\.|\\s|\\b)|[-]|(pk\\.|pak|pack|\\?s|rl)|t[b]|mc|xl|[smlx]{1}(\\/[smlx]{1})?)(?=$|\\.|\\b)"),
measure_raw=str_replace(measure_raw,"x","*"), ##replaces x with * to calculate measure once numeric
newname=str_replace(tolower(newname), "(?<=\\b|^|\\s)\\d{1,4}(\\s+|)([.,\\/]|x|-|\\*|\\/|\\+|%)?\\s*\\d{0,4}?([.,\\/]|x|-|\\*|\\/|\\+|%)?(\\s+|$)|
(?<=\\b|^|\\s)\\d{1,4}(\\s+|)(x|\\*|fl|st[yk]|pcs|bk|[-]|(pk|pak|pack|\\?s|rl)(\\.|)|[smlx](\\/[smlx])?)(\\s+|$)|
[.,\\-\\/*\\+%]|\\b(m|i|vores|med|salling|gestus|og|til|a|c|s|first|loegismose)\\b", ""),
newname= str_squish(newname),
adjustment=case_when(
str_detect(unit_raw,"(cl)")~ "10",
str_detect(unit_raw,"(kg\\.|kg|kilo|kil)")~ "1000",
str_detect(unit_raw,"(^)(l(ite|iter|\\..|))")~ "1000",
str_detect(unit_raw,"(ml)")~ "1",
str_detect(unit_raw,"(%|\\+)")~ "1",
TRUE                      ~ "1")})
##extract and remove dosage information and filter less relevant merchants
## create product dataset where each product is unique. product dataset contains aggregated purchase frequencies as well for later use.
## code be improved even more with dosage and pack combos for i.e. gajol, and a few other changes beer carlsb. 1883
#cpd_proddata<- cpd_match_name%>%
suppressWarnings({cpd_proddata2<- cpd_match_name%>%
mutate(
newname= str_squish(itemname),
newname=str_replace(newname,"(\\&)","og"),
newname=str_replace(newname,"(a38)","acidophilus tykmaelk"),
newname=str_replace(newname,"(\\?)","1/2"),
newname=str_replace(newname,"\\b1883\\b","33cl"),
newname=str_replace(newname,"REMA 1000|\\?|^ |_|\\?|\\&|vaegt",""),
newname=str_replace(newname,"(\\#)",""),
## detect eco products from the product name
eco= case_when(
str_detect(newname,"(konventionel)|(\\bikke oe.o[:alpha:]*\\b)")~ "non eco",
str_detect(newname,"\\boe.o[:alpha:]*\\b")~ "eco",
TRUE                      ~ "unknown"),
## detect country from the product name
country=case_when(
str_detect(newname,"(^|\\s+)d(k|ansk(e|))(\\s+|$)")~ "dk",
str_detect(newname,"(^|\\s+)udl(\\.|and(|ske))(\\s+|$)")~ "other",
str_detect(newname,"(^|\\s+)tysk(|land(e|ske|))(\\s+|$)")~ "other",
TRUE                      ~ "unknown"),
##remove eco and country from name
newname=str_replace(tolower(newname),"(^|\\s+)(d(k|ansk(e|))|udl(\\.|and(|ske))|tysk(|land(e|ske|)))\\b|(loese|kugle konventionel)|
(\\bikke oe.o\\b|\\boe.o\\b)",""),
##get information about fat % or alcohol % or product type from products
product_type_raw=str_extract(tolower(newname), "\\b\\d{1,4}\\s*[.,\\/]?\\s*\\d{0,4}%?\\b|\\b[smlx](\\/)[smlx]?\\b"),
product_type_meassure=str_extract(product_type_raw, "\\d{1,4}\\s*[.,\\/]?\\s*\\d{0,4}"),
product_type_unit=str_replace(product_type_raw, "\\d{1,4}\\s*[.,\\/]?\\s*\\d{0,4}", ""),
## get information about packages i.e. 6 pak, number of products sold i.e. 20 aeg etc.
pieces_raw=str_extract(tolower(newname), "(?<=\\b|^|\\s)\\d{1,4}(\\s+|)(x|\\*|fl|st[yk]|pcs|ds\\.|bk|bakke|[-](pk|pa[:alpha:]k|pack[:alpha:]|pak)|\\?s|rl)(?=\\s|\\b|$)"),
pieces=ifelse(str_detect(tolower(newname), "aeg") & str_detect(tolower(newname), "\\b(([smlx](\\/)[smlx]?)|([smlx]))\\b|$"),
str_extract(tolower(newname), "(?<=\\b|^|\\s)\\d{1,4}"),
str_extract(pieces_raw, "(?<=\\b|^|\\s)\\d{1,4}")),
##remove the information already extracted above
newname=str_replace(newname, "\\b\\d{1,4}\\s*(x|\\*|fl|st[yk]|pcs|hb|bk|pk|pak|pack|\\?s|rl|[smlx](\\/)[smlx]?)[\\d\\s.,\\/]*[%+]?\\b|([smlx](\\/)[smlx]?)(\\s+|$)\\d{1,4}\\s*(x|\\*|fl|st[yk]|pcs|hb|bk|pk|pak|pack|\\?s|rl|[smlx](\\/)[smlx]?)", ""),
newname=str_replace(newname, "(?<=\\b|^|\\s)\\d{1,4}(\\s+|)(x|\\*|fl|st[yk]|pcs|bk|[-](pk|pak|pack|pak)|\\?s|rl|[smlx](\\/)[smlx]?)", ""),
## identify multipliers
##multiplier=str_extract(tolower(newname),"[[:digit:]]{1,4}(s+|)(x|\\*|pk|-|\\/)(s+|)[[:digit:]]{1,4}((\\.|\\,|x|-|\\*|\\/)([[:blank:]]|)([[:digit:]]{1,4})|)"),
number_name=str_extract(tolower(newname), "(?<=\\b|^|\\s)\\d{1,4}(\\s*[.,\\/]?\\s*\\d{0,4})?\\s*(kg\\.|kg|kilo|kil|g[ra]{0,2}m?\\.|
l(ite|iter)?\\.|cl|ml|fl|st[yk]|pcs|hb|bk(,|\\.|\\s|\\b)|[-]|(pk\\.|pak|pack|\\?s|rl)|t[b]|mc|xl|[smlx]{1}(\\/[smlx]{1})?)?(?=\\s|\\b|$)"),
number_name = gsub(",", ".", gsub("\\.", "", number_name)),
##extract not weight units here
dosage=str_extract(tolower(newname), "(?<=^|\\s|\\b)(\\d+(\\.|,|x|-|\\*|\\/)*\\d*\\s*mg)(?=\\s|$|\\.|,|\\b)"),
unit_raw=str_extract(tolower(number_name), "(kg\\.|kg|kilo|kil|g[ra]{0,2}m?\\.|l(ite|iter)?\\.|cl|ml|fl|st[yk]|pcs|hb|bk(,|\\.|\\s|\\b)|[-]|(pk\\.|pak|pack|\\?s|rl)|t[b]|mc|xl|[smlx]{1}(\\/[smlx]{1})?)(?=$|\\.|\\b)"),
measure_raw=str_remove(tolower(number_name), "(kg\\.|kg|kilo|kil|g[ra]{0,2}m?\\.|l(ite|iter)?\\.|cl|ml|fl|st[yk]|pcs|hb|bk(,|\\.|\\s|\\b)|[-]|(pk\\.|pak|pack|\\?s|rl)|t[b]|mc|xl|[smlx]{1}(\\/[smlx]{1})?)(?=$|\\.|\\b)"),
measure_raw=str_replace(measure_raw,"x","*"), ##replaces x with * to calculate measure once numeric
newname=str_replace(tolower(newname), "(?<=\\b|^|\\s)\\d{1,4}(\\s+|)([.,\\/]|x|-|\\*|\\/|\\+|%)?\\s*\\d{0,4}?([.,\\/]|x|-|\\*|\\/|\\+|%)?(\\s+|$)|
(?<=\\b|^|\\s)\\d{1,4}(\\s+|)(x|\\*|fl|st[yk]|pcs|bk|[-]|(pk|pak|pack|\\?s|rl)(\\.|)|[smlx](\\/[smlx])?)(\\s+|$)|
[.,\\-\\/*\\+%]|\\b(m|i|vores|med|salling|gestus|og|til|a|c|s|first|loegismose)\\b", ""),
newname= str_squish(newname),
adjustment=case_when(
str_detect(unit_raw,"(cl)")~ "10",
str_detect(unit_raw,"(kg\\.|kg|kilo|kil)")~ "1000",
str_detect(unit_raw,"(^)(l(ite|iter|\\..|))")~ "1000",
str_detect(unit_raw,"(ml)")~ "1",
str_detect(unit_raw,"(%|\\+)")~ "1",
TRUE                      ~ "1"))})
cpd_proddata2
cpd_proddata2$measure_raw
str_squish(cpd_proddata2$measure_raw)
str_extract_all(str_squish(cpd_proddata2$measure_raw), "[[:digit:]]{1,4}(s+|)")
cpd_proddata2[968,]
#####################
#Run Pipeline
#####################
system.time(tar_make())
tar_meta(fields = error, complete_only = TRUE)
#####################
#Run Pipeline
#####################
system.time(tar_make())
tar_meta(fields = error, complete_only = TRUE)
#####################
#Run Pipeline
#####################
system.time(tar_make())
tar_meta(fields = error, complete_only = TRUE)
colnames(tar_read(cpd_enriched))
colnames(tar_read(cpd2))
#####################
#Run Pipeline
#####################
system.time(tar_make())
tar_read(cpd_enriched_final)
colnames(tar_read(cpd_enriched_final))
test <- tar_read(cpd_enriched_final)
View(test)
#####################
#Run Pipeline
#####################
system.time(tar_make())
#####################
#Run Pipeline
#####################
system.time(tar_make())
colnames(tar_read(cpd_enriched_final))
test <- tar_read(cpd_enriched_final)
View(test)
